name: AWS-EC2 Instance CD

on:
  workflow_run:
    workflows: ["Node.js CI", "Java CI with Maven and CodeQL analyze"]
    types: [completed]
    branches: [master]
  workflow_dispatch:

jobs:
  on-success:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Wait for Docker images to be ready
        run: |
          echo "Waiting 30 seconds for Docker images to be fully pushed..."
          sleep 30

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to EC2 via SSM
        run: |
          echo "Sending deployment command to EC2 instance..."
          
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.AWS_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy Book Portal from GitHub Actions" \
            --parameters 'commands=[
              "cd /home/ubuntu/BookPortal",
              "echo \"Stopping containers...\"",
              "docker-compose stop",
              "echo \"Removing old containers and images...\"",
              "docker-compose rm -f",
              "docker rmi shreyasyadav/book-portal-fe:latest || true",
              "docker rmi shreyasyadav/book-portal-proxy:latest || true",
              "docker rmi shreyasyadav/book-portal-be:latest || true",
              "echo \"Pulling latest images...\"",
              "docker-compose pull",
              "echo \"Starting services...\"",
              "docker-compose up -d",
              "echo \"Cleaning up old images...\"",
              "docker image prune -af",
              "echo \"Deployment complete!\"",
              "docker-compose ps"
            ]' \
            --output text \
            --query 'Command.CommandId')
          
          echo "Command ID: $COMMAND_ID"
          echo "Waiting for command to complete..."
          sleep 15
          
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.AWS_INSTANCE_ID }}" \
            --query '[Status,StandardOutputContent,StandardErrorContent]' \
            --output text
